import { act, fireEvent, render, screen } from "@testing-library/react"
import userEvent from "@testing-library/user-event"
import React from "react"

import { TimelinePanel } from "."
import type { Action } from "./types"

// Mock„Éá„Éº„Çø
const mockActions: Action[] = [
  {
    team: "Team A",
    action: "Pass",
    start: 1000,
    end: 2000,
    labels: ["Good", "Accurate"]
  },
  {
    team: "Team B",
    action: "Shoot",
    start: 3000,
    end: 4000,
    labels: ["Result - goal", "Quality - excellent"]
  },
  {
    team: "Team A",
    action: "Tackle",
    start: 5000,
    labels: ["Defensive"]
  }
]

describe("TimelinePanel", () => {
  const defaultProps = {
    actions: mockActions,
    onExportCSV: jest.fn(),
    onSave: jest.fn(),
    onSeek: jest.fn(),
    onDelete: jest.fn()
  }

  beforeEach(() => {
    jest.clearAllMocks()
  })

  test("„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåË°®ÂΩ¢Âºè„ÅßË°®Á§∫„Åï„Çå„Çã", () => {
    render(<TimelinePanel {...defaultProps} />)

    // „ÉÜ„Éº„Éñ„É´„Éò„ÉÉ„ÉÄ„Éº„ÅÆÁ¢∫Ë™çÔºàÊó•Êú¨Ë™ûË°®Á§∫Ôºâ
    expect(screen.getByText("„ÉÅ„Éº„É†")).toBeInTheDocument()
    expect(screen.getByText("„Ç¢„ÇØ„Ç∑„Éß„É≥")).toBeInTheDocument()
    expect(screen.getByText("ÈñãÂßãÊôÇÈñì")).toBeInTheDocument()
    expect(screen.getByText("ÁµÇ‰∫ÜÊôÇÈñì")).toBeInTheDocument()
    expect(screen.getByText("„É©„Éô„É´")).toBeInTheDocument()

    // „Éá„Éº„ÇøË°å„ÅÆÁ¢∫Ë™ç - „Éï„Ç£„É´„Çø„Éº„ÅÆoption„Å®„ÉÜ„Éº„Éñ„É´„ÅÆ„Çª„É´‰∏°Êñπ„ÅßË°®Á§∫„Åï„Çå„Çã„Åü„ÇÅÊï∞„ÅåÂ¢óÂä†
    expect(screen.getAllByText("Team A").length).toBeGreaterThanOrEqual(2)
    expect(screen.getAllByText("Pass").length).toBeGreaterThanOrEqual(1)
    expect(screen.getAllByText("Team B").length).toBeGreaterThanOrEqual(1)
    expect(screen.getAllByText("Shoot").length).toBeGreaterThanOrEqual(1)
  })

  test("„Ç´„ÉÜ„Ç¥„É™Âåñ„Åï„Çå„Åü„É©„Éô„É´„Åå„Éñ„É©„Ç±„ÉÉ„ÉàË®òÊ≥ï„ÅßË°®Á§∫„Åï„Çå„Çã", () => {
    render(<TimelinePanel {...defaultProps} />)

    // „Éñ„É©„Ç±„ÉÉ„ÉàË®òÊ≥ï„Åß„ÅÆ„É©„Éô„É´Ë°®Á§∫„ÇíÁ¢∫Ë™ç - getAllByText„Çí‰ΩøÁî®„Åó„Å¶Ë§áÊï∞Ë¶ÅÁ¥†„ÇíË®±ÂèØ
    const resultElements = screen.getAllByText((content, element) => {
      return element?.textContent?.includes("Result") || false
    })
    expect(resultElements.length).toBeGreaterThan(0)

    expect(screen.getByText("goal")).toBeInTheDocument()

    const qualityElements = screen.getAllByText((content, element) => {
      return element?.textContent?.includes("Quality") || false
    })
    expect(qualityElements.length).toBeGreaterThan(0)

    expect(screen.getByText("excellent")).toBeInTheDocument()

    // „Ç∑„É≥„Éó„É´ÂΩ¢Âºè„ÅÆ„É©„Éô„É´Ë°®Á§∫„ÇÇÁ¢∫Ë™ç - „Éï„Ç£„É´„Çø„Éº„Å®„ÉÜ„Éº„Éñ„É´‰∏°Êñπ„Å´Ë°®Á§∫„Åï„Çå„Çã
    expect(screen.getAllByText("Good").length).toBeGreaterThanOrEqual(1)
    expect(screen.getAllByText("Accurate").length).toBeGreaterThanOrEqual(1)
  })

  test("ÈÄ≤Ë°å‰∏≠„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅØ„ÄåÈÄ≤Ë°å‰∏≠„Äç„Å®Ë°®Á§∫„Åï„Çå„Çã", () => {
    render(<TimelinePanel {...defaultProps} />)

    // endÊôÇÂàª„Åå„Å™„ÅÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅØ„ÄåÈÄ≤Ë°å‰∏≠„Äç„Å®Ë°®Á§∫
    expect(screen.getByText("ÈÄ≤Ë°å‰∏≠")).toBeInTheDocument()
  })

  test("CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onExportCSV„ÅåÂëº„Å∞„Çå„Çã", async () => {
    const user = userEvent.setup()
    render(<TimelinePanel {...defaultProps} />)

    const exportButton = screen.getByText("CSVÂá∫Âäõ")
    await act(async () => {
      await user.click(exportButton)
    })

    expect(defaultProps.onExportCSV).toHaveBeenCalled()
  })

  test("‰øùÂ≠ò„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onSave„ÅåÂëº„Å∞„Çå„Çã", async () => {
    const user = userEvent.setup()
    render(<TimelinePanel {...defaultProps} />)

    const saveButton = screen.getByText("‰øùÂ≠ò")
    await act(async () => {
      await user.click(saveButton)
    })

    expect(defaultProps.onSave).toHaveBeenCalled()
  })

  test("ÈñãÂßãÊôÇÂàª„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onSeek„ÅåÂëº„Å∞„Çå„Çã", async () => {
    const user = userEvent.setup()
    render(<TimelinePanel {...defaultProps} />)

    // ÊúÄÂàù„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÈñãÂßãÊôÇÂàª„Çí„ÇØ„É™„ÉÉ„ÇØÔºà„Éü„É™Áßí„ÇíÂê´„ÇÄÂΩ¢ÂºèÔºâ
    const startTimeButton = screen.getByText("00:01.000") // 1000ms = 00:01.000
    await act(async () => {
      await user.click(startTimeButton)
    })

    expect(defaultProps.onSeek).toHaveBeenCalledWith(1000)
  })

  test("ÁµÇ‰∫ÜÊôÇÂàª„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onSeek„ÅåÂëº„Å∞„Çå„Çã", async () => {
    const user = userEvent.setup()
    render(<TimelinePanel {...defaultProps} />)

    // ÊúÄÂàù„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÁµÇ‰∫ÜÊôÇÂàª„Çí„ÇØ„É™„ÉÉ„ÇØÔºà„Éü„É™Áßí„ÇíÂê´„ÇÄÂΩ¢ÂºèÔºâ
    const endTimeButton = screen.getByText("00:02.000") // 2000ms = 00:02.000
    await act(async () => {
      await user.click(endTimeButton)
    })

    expect(defaultProps.onSeek).toHaveBeenCalledWith(2000)
  })

  test("ÂâäÈô§„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®onDelete„ÅåÂëº„Å∞„Çå„Çã", async () => {
    const user = userEvent.setup()
    render(<TimelinePanel {...defaultProps} />)

    // „ÉÜ„Éº„Éñ„É´Ë°å„Å´„Éõ„Éê„Éº„Åó„Å¶ÂâäÈô§„Éú„Çø„É≥„ÇíË°®Á§∫„Åï„Åõ„Çã
    const tableRows = screen.getAllByRole("row")
    const firstDataRow = tableRows[1] // „Éò„ÉÉ„ÉÄ„ÉºË°å„ÅÆÊ¨°„ÅÆË°å

    await act(async () => {
      await user.hover(firstDataRow)
    })

    // ÂâäÈô§„Éú„Çø„É≥„ÇíÂèñÂæóÔºà„Ç¥„ÉüÁÆ±„Ç¢„Ç§„Ç≥„É≥„Åæ„Åü„ÅØÂâäÈô§Á¢∫Ë™ç„Éú„Çø„É≥Ôºâ
    const deleteButton = screen.getByRole("button", {
      name: /„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÂâäÈô§„ÇíÈñãÂßã|ÂâäÈô§Á¢∫Ë™ç|üóëÔ∏è/i
    })

    // ÊúÄÂàù„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„ÅßÂâäÈô§Á¢∫Ë™çÁä∂ÊÖã„Å´„Å™„Çã
    await act(async () => {
      await user.click(deleteButton)
    })

    // ‰∫åÂõûÁõÆ„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„ÅßÂÆüÈöõ„Å´ÂâäÈô§„Åï„Çå„Çã
    const confirmButton = screen.getByRole("button", {
      name: /ÂâäÈô§Á¢∫Ë™ç|„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®ÂâäÈô§„Åï„Çå„Åæ„Åô/i
    })
    await act(async () => {
      await user.click(confirmButton)
    })

    expect(defaultProps.onDelete).toHaveBeenCalledWith("Team A", "Pass", 1000)
  })

  test("Á©∫„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÖçÂàó„Åß„ÇÇ„Ç®„É©„Éº„Å´„Å™„Çâ„Å™„ÅÑ", () => {
    render(<TimelinePanel {...defaultProps} actions={[]} />)

    // „ÉÜ„Éº„Éñ„É´„Éò„ÉÉ„ÉÄ„Éº„ÅØË°®Á§∫„Åï„Çå„ÇãÔºàÊó•Êú¨Ë™ûÔºâ
    expect(screen.getByText("„ÉÅ„Éº„É†")).toBeInTheDocument()

    // „Éá„Éº„ÇøË°å„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ
    expect(screen.queryByText("Team A")).not.toBeInTheDocument()
  })

  test("ÊôÇÂàª„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã", () => {
    const longTimeActions = [
      {
        team: "Team A",
        action: "Long Action",
        start: 65000, // 1ÂàÜ5Áßí
        end: 125000, // 2ÂàÜ5Áßí
        labels: []
      }
    ]

    render(<TimelinePanel {...defaultProps} actions={longTimeActions} />)

    expect(screen.getByText("01:05.000")).toBeInTheDocument()
    expect(screen.getByText("02:05.000")).toBeInTheDocument()
  })

  test("„É©„Éô„É´„ÅåË§áÊï∞„ÅÇ„ÇãÂ†¥Âêà„ÅØÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã", () => {
    const multiLabelAction = [
      {
        team: "Team A",
        action: "Complex Action",
        start: 1000,
        end: 2000,
        labels: ["Label1", "Category - Value1", "Category - Value2", "Label3"]
      }
    ]

    render(<TimelinePanel {...defaultProps} actions={multiLabelAction} />)

    // „Åô„Åπ„Å¶„ÅÆ„É©„Éô„É´„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç - „Éï„Ç£„É´„Çø„Éº„Å®„ÉÜ„Éº„Éñ„É´‰∏°Êñπ„Å´Ë°®Á§∫„Åï„Çå„Çã
    expect(screen.getAllByText("Label1").length).toBeGreaterThanOrEqual(1)

    // Ë§áÊï∞„ÅÆCategory„É©„Éô„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÇíËÄÉÊÖÆ„Åó„Å¶getAllByText„Çí‰ΩøÁî®
    const categoryElements = screen.getAllByText((content, element) => {
      return element?.textContent?.includes("Category") || false
    })
    expect(categoryElements.length).toBeGreaterThanOrEqual(2) // Category - Value1„Å®Category - Value2„ÅÆ2„Å§

    expect(screen.getByText("Value1")).toBeInTheDocument()
    expect(screen.getByText("Value2")).toBeInTheDocument()
    expect(screen.getAllByText("Label3").length).toBeGreaterThanOrEqual(1)
  })
})
